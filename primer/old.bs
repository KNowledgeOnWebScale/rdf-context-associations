





Blank Node Graphs {#blank_node_graphs}
======================================
<!-- 
Issue: We have a choice here to either provide specific predicates / types to indicate a required interpretation OR an RDF profile.
The choice for using a profile is much more interesting in terms of reusability, as agreeing on graph interpretation is a broader issue to solve.
Additionally, the use of predicates and classes has 2 problems: 
1. if the identifying type is not present, interpretation changes, which should not be possible under RDF
2. if the type is present but no graph uses that identifier, we have an inconsistency.  
-->

The RDF core specification provides three approaches to modeling statements 
about (sets of) statements in RDF through reification, named graphs and triple terms.
This specification makes use of the named graphs approach, as this is the only modeling approach
that allows sets of statements to be targeted natively in RDF.

The use of Named Graphs in RDF requires the addition of concrete rules for definition
and interpretation of the context association model, that are enforced through the use 
of the following RDF profile: 

Issue: Graph occurrence? what name would be good?

```
    <Content-Type>;profile=https://w3id.org/ca/graph_occurence
```

## Enforcing semantic interpretation of named graphs

<!-- we need to enforce a specific interpretation -->

To define context associations using named graphs in RDF,
the following interpretation is be enforced within the profile:
```
Te Named Graph identifies a pair of a name identifier and a graph term where:
(i) the name identifier MUST be interpreted as the referent for the associated graph term and
(ii) the graph term MUST be interpreted as the occurrence of that graph term denoted by the name identifier. 
```
Concretely, this defines that all references to the name identifier of a Named Graph
MUST be interpreted as referencing the associated Graph term and its contained set of triple statements.
Additionally, the semantic inferences of the contents of the associated Graph Term are contained to the graph boundary.

<!-- Issue: define this for all inferences EXCEPT basic inference (e.g. blank node co-referencing) -->

<!-- Issue: can we align this anywhere? The RDF 1.2 SPARQL entailment and semantics and ... specs are not yet done. -->

<!-- Issue:  OOOOR we define only the reference part BUT NOT the interpretation of the graph semantics part?
Unsure what the downsides are of leaving the interpretation of the graph up to the implementer, 
and in essence it might not be the requirement of the context association to define the interpretation of the trust value of the contained triples? -->


<figure id="my-code" class="listing">
```
> Content-Type: text/trig;profile=https://w3id.org/ca/graph_occurence

@prefix : <http://example.org/ns>;
_:signature :target _:targetGraph;
_:targetGraph { :a :b :c . }
```
<figcaption markdown="block">
The profile interpretation enforces the Signature target to 
be exactly the set of quads for which the graph term equals `_:graphName`,
which in this case is `:a :b :c _:graphName`.
</figcaption>
</figure>


## Preventing ambiguity using Blank Nodes identifiers

To prevent ambiguity in the interpretation of context associations, we need to take into 
account the RDF specification that defines merging different sources of RDF data requires 
their named graphs to be combined using the `merge` or `union` operation on their contained graphs.
As context associations need to be unambiguous, the use of non-unique identifiers as graph name 
identifiers is excluded.

To defined context associations, the target set of statements MUST be defined as a 
named graph with a blank node identifier or skolemized identifier.

As blank node identifiers are defined as existential in the local RDF scope, 
any clashing blank node identifiers that are merged into the local graph must
be relabeled according to the RDF specification. This however also means that
these blank node identifiers are not referencable from outside the local scope.
For cases where external referencability is required, 
the use of [Skolemized identifiers](https://www.w3.org/TR/rdf11-mt/#skolemization-informative)
guarantees the uniqueness of generated identifiers, while remaining referenceable 
from outside the local RDF scope.

Issue: We could make the point that, as conveying information using a specific interpretation
of blank node graphs conveyed using a profile and/or a hinting identifier type is a best-effort approach,
the same statements can be provided in the default graph, where they are subject to the 
impicit context of the data exchange?

<!-- 
Appendix A: Multiple Graph Associations {#multiple_graphs}
==============================================

To define context associations over multiple sets of RDF statements,
we advise the targeting of individual sets of statements as follows:
```turtle
<context> <targets> _:graph1, _;graph2
```
in which case the interpretation of the context associations takes the form of:
```
context targets (graph1, graph2) => context targets (graph1), context targets (graph2)
```

However, in cases such as negative references, where the union of sets of statements 
needs to be explicitly targeted, we propose the use of an entity that represents the
syntactic union of the target graphs.

This is modeled as an entity of the type `ca:GraphUnion` that includes
the graphs to be targeted using the `ca:includes` as follows:

<figure>
```turtle
> Content-Type: text/trig;profile=https://w3id.org/ca/graph_occurence

@prefix ca: <https://w3id.org/contextassociations#>.
@prefix : <http://example.org/ns>.

_:signature :targets _:graphUnion;

_:graphUnion a ca:GraphUnion;
    ca:includes _:graph1, _:graph2.

_:graph1 { :a :b :c . }
_:graph2 { :x :y :z . }
```
<figcaption>
The signature targets the union of quads 
with a graph term `_:graph1` and with graph term `_:graph2`,
WITHOUT targeting the _:graphUnion entity and its inclusion statements.
</figcaption>    
</figure>

We propose that the interpretation of a target URI that is of type `ca:GraphUnion` is 
defined as `the set of quads for which the graph term is defined as included by 
the GraphUnion entity using the ca:includes predicate`.
Note that this DOES NOT include the GraphUnion entity itself and its inclusion statements
in the target set of quads!


Appendix B: Including Source Quads {#quads}
===============================

To define context associations over a set of RDF statements that is already
defined in a named graph, a conversion to blank node identifiers for the graph 
name is required.

However, as the RDF specification does not define a specific interpretation 
for the relation between the graph name and associated RDF graph in a named graph,
conflicting interpretations are currently in use.

Hence, we propose the following algorithm to convert any set of source quads
with a graph term `G` to a blank node graph format that can be targeted in a 
context association:

1. rename the graph term `G` to a blank node identifier `_:G`.
2. depending on the interpretation of the graph name in the source data:
    - if the graph name is meant as a graph reference, relabel all occurrences of the `G` to `_:G`.
    - else, do not relabel other occurrences of `G` in the source.
3. define any implicit meaning attached to the identifier `G` as explicit context information defined on `_:G`.

NOTE: When relabeling source graphs individually, make sure to replace other occurrences of 
the graph name identifiers when combining the resulting relabeled data in the same scope.


An example conversion of source quads from Ruben's personal dataspace:

```turtle
:Ruben foaf:name "Ruben" <https://ruben.com/profile.ttl>.
:Ruben foaf:knows :Pieter <https://ruben.com/profile.ttl>.
:Pieter foaf:PersonalProfileDocument <https://pieter.org/profile.ttl> <https://ruben.com/profile.ttl>.

:Pieter foaf:name "Pieter" <https://pieter.org/profile.ttl>.
```

that defines provenance inforamtion and an associated signature is done as follows.
Note that the profile document URI is NOT relabeled in this case, as it was not 
defined as a graph name in the original dataspace graph.


```turtle
_:signatureGraph { _:signature :targets _:provenanceGraph; :issuer :Ruben. }
_:signatureGraph2 { _:signature2 :targets _:graph1; :issuer :Ruben. }

_:provenanceGraph {
    _:graph1 :origin <https://ruben.com/profile.ttl>.
    _:graph2 :origin <https://pieter.org/profile.ttl>.
}

_:graph1 {
    :Ruben foaf:name "Ruben".
    :Ruben foaf:knows :Pieter.
    :Pieter foaf:PersonalProfileDocument <https://pieter.org/profile.ttl>. 
}
_:graph2 {
    :Pieter foaf:name "Pieter".
}

```

At the receiving side, the original content can be processed
by interpreting the received associations of contextual information
and data. 
By explicitly interpreting the statements of the received 
context associations into a format where the graph name identifier
defines the origin of the a statement, the original dataset can 
be reconstructed. 

-->





<div class="example">
An example association providing user-signed usage access to a medical instance of government-signed user medical data.
```turtle
@prefix sign: <https://example.org/signature#>.
@prefix prov: <https://example.org/provenance#>.
@prefix pol: <https://example.org/policy#>.
@prefix reg: <https://example.org/government/registry#>.
@prefix med: <https://example.org/government/medical#>.

_:policySignatureGraph {
    _:s a sign:Signature;
        sign:value "...";
        sign:target _:targetGraph;
        sign:issuer <http://people.org/Ruben>.
}

_:policyGraph {
    _:p a pol:Policy;
        pol:permission [
            pol:target _:targetGraph;
            pol:action pol:Read;
            pol:assigner <http://people.org/Ruben>;
            pol:assignee med:MedicalService.
        ].
}

_:dataSignatureGraph {
    _:s a sign:Signature;
        sign:value "...";
        sign:target _:targetGraph;
        sign:issuer reg:CitizenDatabase.
}

_:dataGraph {
    <http://people.org/Ruben> foaf:name "Ruben".    
        foaf:age 28.
    med:PatientRecord19237128149 :targetUser <http://people.org/Ruben>.
        med:date "2021-01-01"^^xsd:date.
        med:doctor ...;
}
```
</div>


<pre class=biblio>

@misc{svensson_negotiating_2017,
	title = {Negotiating {Profiles} in {HTTP}},
	url = {https://profilenegotiation.github.io/I-D-Accept--Schema/I-D-accept-schema},
	abstract = {This document defines two new HTTP headers "Content-Profile" and "Accept-Profile" that enable User Agents and hosts to indicate and negotiate the profile used for representing a specific resource.  In this context, a profile is a description of the structural and/or semantic constraints of a group of documents in addition to the syntactical interpretation provided by more generic MIME types.  Examples of profiles include Dublin Core Application Profiles, XML Schemata, and RDF Shape Expressions.  This document further defines and registers the "profile" parameter for the HTTP "Link" header and suggests a best practice for the use of the new headers together with the "Link" header for the purposes of performing content negotiation and pointing clients to alternate representations.},
	language = {en},
	urldate = {2025-03-11},
	author = {Svensson, L. {and} R. Verborgh},
	month = sep,
	year = {2017},
	file = {Snapshot:/home/dexa/Zotero/storage/2BM95WIK/I-D-accept-schema.html:text/html},
}

</pre>