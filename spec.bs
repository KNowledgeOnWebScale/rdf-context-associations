<pre class='metadata'>
Title: RDF Context Associations
Shortname: RDF Context Associations
Warning: Not Ready
Level: none
Status: LD
Repository: KNowledgeOnWebScale/rdf-context-associations
URL: https://knowledgeonwebscale.github.io/rdf-context-associations/
Editor: Ruben Dedecker, IDLab - Ghent University, ruben.dedecker@ugent.be
Editor: Pieter Colpaert, IDLab - Ghent University, https://pietercolpaert.be
Abstract: This specification describes the definition of general context associations in RDF using RDF graphs
Markup Shorthands: markdown yes, css no
</pre>

<!-- Abstract: The RDF Context Association specification provides instructions for clients to interpret associations of contextual data to a closed set of target statements in RDF. It defines how closed sets of statements can be modeled in RDF as Named Graphs with Blank Node name identifiers (Blank Node Graphs) and the modeling of sets of Blank Node Graphs that can be interpreted as a single closed set of quad statements. -->

<!-- useful sources? -->
<!-- [Semantics of RDF Datasets](https://www.w3.org/TR/rdf11-datasets/) -->
<!-- [Blank Node Relabeling](https://www.w3.org/TR/rdf11-mt/#shared-blank-nodes-unions-and-merges) -->
<!-- [Skolemization](https://www.w3.org/TR/rdf11-mt/#skolemization-informative) -->

Introduction {#intro}
=====================
<!-- The goal of the spec is to be able to define a TARGET set of statements -->
`Context Associations` is a modeling approach for modeling and interpreting 
a target reference consisting of a closed set of statements in RDF. 
The approach provides guarantees of remaining unambiguous under 
storage, exchange and processing in the Semantic Web ecosystem.
<!-- we want to be able to include even existing metadata standards  -->
Current models for signatures, provenance and policy information
often do not specify explicit boundaries of their target information in 
the RDF ecosystem, relying on external interpretation or non-rdf processing
to define target boundaries.
The ability to define the target of these context definitions as a closed
set of statements within the local scope enables the combined processing 
of these context definitions using the RDF stack.

<div class="example">
Defining a set of statements as the target Dataset with associated origin.
```turtle
> Content-Type: text/trig;profile=https://w3id.org/ca/graph_occurence

@prefix dcat: <http://www.w3.org/ns/dcat#>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix sign: <https://example.org/signature#>.


_:graph {
    <http://people.org/ruben> foaf:name "Ruben";
        foaf:age 28.
}

_:graph a dcat:Dataset;
    dcterms:creator <http://people.org/ruben>;
    dcterms:created "2021-01-01"^^xsd:date.

_:signature a sign:Signature;
    sign:target _:graph;
    sign:issuer <http://people.org/ruben>.
    ...
```
</div>

To model target sets of statements, we make use of Named Graphs in RDF.
[[#named_graph_references]] defines the modeling requirements for 
these Named Graphs that enables uniform interpretation throughout the 
ecosystem. 
[[#blank_node_graphs]] defines the requirements for ensuring 
target sets of statements are closed in the local scope, 
making them immutable from external sources.




Named Graph references {#named_graph_references}
==================================================
Defining contextual information that targets a set of statements encompassed
in a Named graph, the ability to reference the RDF Graph contained in the 
name-graph pair using its name identifier is required.

To enforce this interpretation, the RDF profile `https://w3id.org/ca/graph_occurence` 
can be defined on the source using [profile negotiation in HTTP](https://profilenegotiation.github.io/I-D-Accept--Schema/I-D-accept-schema)
in an approach that enforces the above interpretation over the full data source: 

```
> Content-type text/turtle;profile=https://w3id.org/ca/graph_occurence

_:graphName { ... }
```

Any RDF datasource retrieved advertising the profile `https://w3id.org/ca/graph_occurence`
MUST interpret name identifiers of named graphs in its content 
as referencing the associated RDF Graph of the named graph.

Issue: todo: incorporate other expressions of profile negotiation

Alternatively, the interpretation can be hinted in the RDF scope
by defining the name identifier of a named graph as an `rdf:type` 
of `ca:GraphIdentifier`.

```turtle
@prefix ca: <https://w3id.org/ca/> .

_:graphName a ca:GraphIdentifier.
_:graphName { ... }
```
Any identifier defined with an `rdf:type` of `ca:GraphIdentifer`
MUST be interpreted as referencing the associated RDF Graph of the named graph.


Blank Node Graphs {#blank_node_graphs}
======================================
<!-- This section targets the problem of making target sets of statements closed / unambiguous (at least syntactically) -->

The definition of target sets of statements an Named Graphs,
in addition to requiring the name identifier to reference the contained RDF Graph 
also requires the set of statements contained by this RDF Graph to remain unambiguous throughout its lifespan.

To enforce the unique definition of Named Graph, its name identifier MUST
be defined as EITHER a Blank Node identifier, or as a [Skolemized identifier](https://www.w3.org/TR/rdf11-mt/#skolemization-informative)
in cases where external references are required to ensure the unique generation of the name identifier.

<div class="example">
An example association providing user-signed usage access to a medical instance of government-signed user medical data using skolemized name identifiers for named graphs.
```turtle
@prefix sign: <https://example.org/signature#>.
@prefix prov: <https://example.org/provenance#>.
@prefix pol: <https://example.org/policy#>.
@prefix reg: <https://example.org/government/registry#>.
@prefix med: <https://example.org/government/medical#>.
@prefix skolem: <https://example/org/.well-known/skolem/8b98b360-9a70-4845-b52c-c675af60ad01#>.


skolem:policySignatureGraph {
    _:s a sign:Signature;
        sign:value "...";
        sign:target _:targetGraph;
        sign:issuer <http://people.org/Ruben>.
}

skolem:policyGraph {
    _:p a pol:Policy;
        pol:permission [
            pol:target _:targetGraph;
            pol:action pol:Read;
            pol:assigner <http://people.org/Ruben>;
            pol:assignee med:MedicalService.
        ].
}

skolem:dataSignatureGraph {
    _:s a sign:Signature;
        sign:value "...";
        sign:target _:targetGraph;
        sign:issuer reg:CitizenDatabase.
}

skolem:dataGraph {
    <http://people.org/Ruben> foaf:name "Ruben".    
        foaf:age 28.
    med:PatientRecord19237128149 :targetUser <http://people.org/Ruben>.
        med:date "2021-01-01"^^xsd:date.
        med:doctor ...;
}
```
</div>


