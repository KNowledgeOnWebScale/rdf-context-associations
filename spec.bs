<pre class='metadata'>
Title: RDF Context Associations
Shortname: RDF Context Associations
Warning: Not Ready
Level: none
Status: LD
Repository: KNowledgeOnWebScale/rdf-context-associations
URL: https://knowledgeonwebscale.github.io/rdf-context-associations/
Editor: Ruben Dedecker, IDLab - Ghent University, ruben.dedecker@ugent.be
Editor: Pieter Colpaert, IDLab - Ghent University, https://pietercolpaert.be
Abstract: This specification describes the definition of general context associations in RDF using RDF graphs
Markup Shorthands: markdown yes, css no
</pre>

<!-- Abstract: The RDF Context Association specification provides instructions for clients to interpret associations of contextual data to a closed set of target statements in RDF. It defines how closed sets of statements can be modeled in RDF as Named Graphs with Blank Node name identifiers (Blank Node Graphs) and the modeling of sets of Blank Node Graphs that can be interpreted as a single closed set of quad statements. -->

<!-- useful sources? -->
<!-- [Semantics of RDF Datasets](https://www.w3.org/TR/rdf11-datasets/) -->
<!-- [Blank Node Relabeling](https://www.w3.org/TR/rdf11-mt/#shared-blank-nodes-unions-and-merges) -->
<!-- [Skolemization](https://www.w3.org/TR/rdf11-mt/#skolemization-informative) -->



Introduction {#intro}
=====================

Issue: define namespace `ca` as `https://w3id.org/contextassociations#`, 

Issue: discuss the used names over the whole document!

`RDF Context Associations` are a modeling approach associations of information to a closed set of 
RDF statements that remain unambiguous under storage, merging and processing operations in the RDF stack.
As current specifications for policies, provenance and signatures in RDF do not define specific
semantics requirements for their targets except for defining the target as a URI,
the processing of the associated set of statements to this contextual information in the RDF stack
is left up to interpretation.

The goal of this specification is to provide a modeling approach that enables the definition of 
a closed set of statements (or collection of sets of statements) in RDF that when targeted by contextual
information remains unambiguous when processed throughout the network in which they are exchanged
and the RDF stack in which they are processed.

This raises the following set of requirements that have to be fulfilled:
(i) the unambiguity of the referenced set of statements, 
(ii) the ability to unambiguously reference the union of multiple such sets of statements, 
(iii) the interpretation of the target should not influence the contextual information model,
(iv) the data model used for the associations should remain compatible with the core RDF specification
and (v) that any set of RDF quads can be converted to a valid target for such a context association.

Issue: rephrase this baseuri presentation

The base URI for RDF Context Association is https://w3id.org/ca#, and the preferred prefix is `ca`:. Other prefixes are used following [prefix.cc](prefix.cc).




Blank Node Graphs {#blank_node_graphs}
======================================

Issue: We have a choice here to either provide specific predicates / types to indicate a required interpretation OR an RDF profile.
The choice for using a profile is much more interesting in terms of reusability, as agreeing on graph interpretation is a broader issue to solve.
Additionally, the use of predicates and classes has 2 problems: 
1. if the identifying type is not present, interpretation changes, which should not be possible under RDF
2. if the type is present but no graph uses that identifier, we have an inconsistency.
Hence the choice we make will be for a profile.

The main requirement for the target approach to model context associations in RDF is 
the ability to define contextual information over a closed set of targe statements that
remain unambiguous under storage, exchange and processing throughout the network.
The RDF core specification provides three approaches to modeling statements about statements
in the use of reification, named graphs and triple terms.
As named graphs is the only modeling approach that can target sets of statements, 
we use this as the baseline for the modeling approach to define context associations.

The use of Named Graphs in RDF requires the addition of concrete rules for definition
and interpretation of the context association model, that are enforced through the use 
of the following RDF profile: 
```
    <Content-Type>;profile=https://w3id.org/ca/graph_occurence
```

## Enforcing semantic interpretation of named graphs

<!-- we need to enforce a specific interpretation -->

To define context associations using named graphs in RDF,
the following interpretation is be enforced within the profile:
```
Te Named Graph identifies a pair of a name identifier and a graph term where:
(i) the name identifier MUST be interpreted as the referent for the associated graph term and
(ii) the graph term MUST be interpreted as the occurrence of that graph term denoted by the name identifier. 
```
Concretely, this defines that all references to the name identifier of a Named Graph
MUST be interpreted as referencing the associated Graph term and its contained set of triple statements.
Additionally, the semantic inferences of the contents of the associated Graph Term are contained to the graph boundary.

Issue: define this for all inferences EXCEPT basic inference (e.g. blank node co-referencing)

Issue: can we align this anywhere? The RDF 1.2 SPARQL entailment and semantics and ... specs are not yet done.

Issue:  OOOOR we define only the reference part BUT NOT the interpretation of the graph semantics part?
Unsure what the downsides are of leaving the interpretation of the graph up to the implementer, 
and in essence it might not be the requirement of the context association to define the interpretation of the trust value of the contained triples?


<figure id="my-code" class="listing">
```
> Content-Type: text/trig;profile=https://w3id.org/ca/graph_occurence

@prefix : <http://example.org/ns>;
_:signature :target _:graphName;
_:graphName { :a :b :c . }
```
<figcaption markdown="block">
The profile interpretation enforces the Signature target to 
be exactly the set of quads for which the graph term equals `_:graphName`,
which in this case is `:a :b :c _:graphName`.
</figcaption>
</figure>


## Preventing ambiguity using Blank Nodes identifiers

Issue: is blank nodes a SHOULD or a MUST (even if you can guarantee uniqueness of the graph name URIs?)

In addition to semantic interpretation, the syntactic expression of context associations
using named graphs must also remain unambiguous throughout its use in the network.
The RDF specification defines that merging different sources of RDF data requires 
their named graphs to be combined using the `merge` or `union` operation on their contained graphs.
Because of this, named graphs sharing the same name identifiers in different sources 
are combined into a single named graph when combining RDF from different sources.
To prevent this behavior invalidating context associations when merging data,
the use of blank nodes as name identifiers for named graphs is advised when uniqueness of graph names cannot be guaranteed.

Defining the target set of triple statements of a context association in RDF SHOULD 
make use of a blank node as the name identifier of the named graph that contains the 
target set of triple statements. 
If cases where the target set of statements needs to be referenced by external sources,
the use of [Skolemized identifiers](https://www.w3.org/TR/rdf11-mt/#skolemization-informative)
guarantees tge unique generation of name identifiers, while remaining referenceable outside the local RDF scope.



Multiple Graph Associations {#multiple_graphs}
==============================================


// Todo:: continue read through from here


Issue: Should the includes be a list for ensuring closure? 
E.g. if we lose a targets link, the list breaks and we can see the policy is incomplete?

For use-cases such as defining signatures over multiple heterogenous 
sets of statements, the expression of a signature over a conjunction
of Named Graphs is NOT the same as defining the signature over the individual graphs.
(`sign (graph1 ∩ graph2) ≠ `sign(Graph1) ∩ sign(Graph2)`).
For these cases, we express the union of the target set of Named Graphs
as an entity of the type `ca:GraphUnion`, that includes a set of graphs 
using the `ca:incudes` predicate.

```turtle
@prefix ca: <https://w3id.org/contextassociations#>.
@prefix : <http://example.org/ns>.

_:signature :targets _:graphUnion;

_:graphUnion a ca:GraphUnion;
    ca:includes _:graph1, _:graph2.

_:graph1 { ... }
_:graph2 { ... }

_:graph1 a ca:GraphIdentifier
_:graph2 a ca:GraphIdentifier
```

Issue: When targeting a GraphUnion, can we specify that the GraphUnion entity itself should be disregarded when evaluating the quads to e.g. sign?

Processing a target entity of type `ca:GraphUnion`, 
with `S` the set of referenced graphs using the 
`ca:includes` predicate, the processor MUST interpret
the referenced set of quads as: 
`the set of quads in the local RDF scope for which 
the quad Graph Term is contained in S`.

Issue: testing compliance - how?


Including Source Quads {#quads}
===============================

Issue: We need to make sure we are clear in the communication here: 
the use of context associations is to help EXPLICITIZE implicit assumptions stored in a graph name identifier. 
So (i) we need to make sure to indicate how to convert explicit "LOCAL KNOWLEDGE of what the graph means 
(e.g. origin) can be made explicit as provenance"
Additionally (ii) we need to convey that the choice of how graph name identifiers 
should be relabeled inside the triple statements is undecidable and should be taken case by case.
(e.g. if the graph name is meant as a graph reference, it should be relabeled to a blank node. 
If it indicates something specific such as source, existing references to that source URI should be kept as is.)
(ii) Show that based on the above 2 choices, roundtripping can be done based on the knowledge of the above 2 parameters? Maybe?

Including source data when defining contextual information, 
the named graphs in the source data will need to be processed
to a Blank Node Graph format that guarantees uniqueness of 
the Named Graph name identifier.

In cases where uniqueness can be guaranteed for the identifiers
of used Named Graphs, the graphs present MAY be reused. In other
cases, or for external exchange of statements, a Named Graph with
a Blank Node name identifier SHOULD be created to contain the 
exchanged statements.

As there are multiple possible interpretations of the name identifier
for Named Graphs in RDF, relabeling the Named Graph name identifier 
throughout the exchanged data might or might not be preferable.

Issue: The first issue is that there are 2 conflicting interpretations of graph name values and their associated named graphs.
EITHER the name is a reference or it is not. Automating a relabeling with either of these 2 interpretations breaks the other interpretation.
So the best approach is to leave this up to the implementer. (same as blank node merging having both a merge and union option).

Issue: Secondly, we may need to keep hold of the original graph name for the use-case of reverting the relabeling later.

An example set of content statements

```turtle
:Ruben foaf:name "Ruben" <https://ruben.com/profile.ttl>.
:Ruben foaf:knows :Pieter <https://ruben.com/profile.ttl>.
:Pieter foaf:PersonalProfileDocument <https://pieter.org/profile.ttl> <https://ruben.com/profile.ttl>.
:Pieter foaf:name "Pieter" <https://pieter.org/profile.ttl>.
```

Is converted to the following Blank Node Graph format when creating a context association:

```turtle
_:signatureGraph {
    _:signature :targets _:graphUnion;
        :value "...";
        :issuer :Ruben;

    _:graphUnion a ca:GraphUnion;
        ca:includes _:provenanceGraph, _:graph1, _:graph2.
}

_:provenanceGraph {
    _:graph1 :origin <https://ruben.com/profile.ttl>.
    _:graph2 :origin <https://pieter.org/profile.ttl>.
}

_:graph1 {
    :Ruben foaf:name "Ruben".
    :Ruben foaf:knows :Pieter.
    
    # The profileDocument EITHER is retained as its original URI
    :Pieter foaf:PersonalProfileDocument <https://pieter.org/profile.ttl>. 

    # OR the profileDocument link is relabeled to reference the local graph
    :Pieter foaf:PersonalProfileDocument _:graph2. 
}

_:graph2 {
    :Pieter foaf:name "Pieter".
}

```

The exact requirements when relabeling Named Graph name identifiers
is dependent on the interpretation of these identifiers in the 
local data model and is left up to the implementer.